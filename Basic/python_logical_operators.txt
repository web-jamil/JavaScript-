In Python, **logical operators** are used to combine conditional statements or boolean expressions. These operators allow you to perform logical operations such as AND, OR, and NOT on expressions. Logical operators are commonly used in `if` conditions, loops, and boolean expressions to control program flow.

### **1. Logical AND (`and`)**

The `and` operator is used to combine two conditions. It returns `True` if both conditions are `True`; otherwise, it returns `False`.

#### **Syntax:**
```python
condition1 and condition2
```

#### **Explanation:**
- If both `condition1` and `condition2` are `True`, the result will be `True`.
- If any one of them is `False`, the result will be `False`.

#### **Example:**
```python
x = 10
y = 20
if x > 5 and y > 15:
    print("Both conditions are true.")  # Output: Both conditions are true.
```

Here:
- `x > 5` and `y > 15` are both true, so the output is `"Both conditions are true."`.



### **2. Logical OR (`or`)**

The `or` operator is used to combine two conditions. It returns `True` if at least one of the conditions is `True`. If both conditions are `False`, it returns `False`.

#### **Syntax:**
```python
condition1 or condition2
```

#### **Explanation:**
- If either `condition1` or `condition2` is `True`, the result will be `True`.
- If both conditions are `False`, the result will be `False`.

#### **Example:**
```python
x = 10
y = 5
if x > 5 or y > 10:
    print("At least one condition is true.")  # Output: At least one condition is true.
```

Here:
- `x > 5` is `True`, so the output is `"At least one condition is true."`.


### **3. Logical NOT (`not`)**

The `not` operator inverts the boolean value of the condition. It returns `True` if the condition is `False`, and `False` if the condition is `True`.

#### **Syntax:**
```python
not condition
```

#### **Explanation:**
- If `condition` is `True`, `not condition` will be `False`.
- If `condition` is `False`, `not condition` will be `True`.

#### **Example:**
```python
x = 10
if not (x < 5):
    print("x is not less than 5.")  # Output: x is not less than 5.
```

Here:
- `x < 5` is `False`, so `not (x < 5)` becomes `True`, and the output is `"x is not less than 5."`.


### **4. Combining Logical Operators**

You can combine logical operators to form more complex expressions. The precedence of logical operators follows the order: `not`, `and`, then `or`. This means that `not` is evaluated first, followed by `and`, and `or` is evaluated last. You can use parentheses to override the default precedence.

#### **Syntax:**
```python
(condition1 and condition2) or condition3
```

#### **Example:**
```python
x = 10
y = 5
z = 3
if (x > 5 and y < 10) or z == 3:
    print("Condition is true.")  # Output: Condition is true.
```

Here:
- `x > 5 and y < 10` is `True`, so the `or` condition is true, and the output is `"Condition is true."`.


### **5. Truth Tables**

Logical operators can be understood better through **truth tables**:

#### **AND Truth Table (`and`):**

| `condition1` | `condition2` | `condition1 and condition2` |
|--------------|--------------|-----------------------------|
| `True`       | `True`       | `True`                      |
| `True`       | `False`      | `False`                     |
| `False`      | `True`       | `False`                     |
| `False`      | `False`      | `False`                     |

#### **OR Truth Table (`or`):**

| `condition1` | `condition2` | `condition1 or condition2` |
|--------------|--------------|----------------------------|
| `True`       | `True`       | `True`                     |
| `True`       | `False`      | `True`                     |
| `False`      | `True`       | `True`                     |
| `False`      | `False`      | `False`                    |

#### **NOT Truth Table (`not`):**

| `condition` | `not condition` |
|-------------|-----------------|
| `True`      | `False`         |
| `False`     | `True`          |


### **6. Short-circuiting in Logical Operators**

- **`and` short-circuiting**: If the first condition is `False`, the second condition is not evaluated because the result will already be `False`.
  
  Example:
  ```python
  x = 0
  if x > 5 and (10 / x > 2):  # The second condition is not evaluated because the first one is False.
      print("This won't run.")
  ```

- **`or` short-circuiting**: If the first condition is `True`, the second condition is not evaluated because the result will already be `True`.

  Example:
  ```python
  x = 5
  if x > 0 or (10 / x > 2):  # The second condition is not evaluated because the first one is True.
      print("This runs.")
  ```

### **7. Using Logical Operators in Conditions**

Logical operators are commonly used in `if` statements, loops, and other conditions to evaluate multiple conditions simultaneously.

#### **Example:**
```python
age = 20
citizen = True

if age >= 18 and citizen:
    print("You are eligible to vote.")
else:
    print("You are not eligible to vote.")
```

In this example:
- The condition `age >= 18 and citizen` is evaluated.
- If both conditions are `True`, the program prints `"You are eligible to vote."`.


### **8. Logical Operators in Loops**

You can use logical operators within `while` and `for` loops to control the loop's behavior.

#### **Example with `while`:**
```python
x = 0
while x < 10 and x != 5:  # This loop will run until x is less than 10 and x is not equal to 5.
    print(x)
    x += 1
```

Here, the loop will run as long as `x` is less than `10` and `x` is not `5`.

#### **Example with `for`:**
```python
numbers = [1, 2, 3, 4, 5]
for num in numbers:
    if num % 2 == 0 or num == 3:  # Condition checks if num is even or equal to 3.
        print(num)
```

In this example, the program prints numbers that are either even or equal to 3.


### **9. Using Logical Operators with Lists**

Logical operators can be used to evaluate expressions involving elements of lists.

#### **Example:**
```python
numbers = [1, 2, 3, 4, 5]
result = any(num > 3 for num in numbers) and all(num < 6 for num in numbers)
print(result)  # Output: True
```

- `any()` checks if any number in the list is greater than 3.
- `all()` checks if all numbers in the list are less than 6.
- The `and` operator combines the two results.

### **10. Summary of Logical Operators in Python**

| **Operator** | **Symbol** | **Description**                                             | **Example**                                                |
|--------------|------------|-------------------------------------------------------------|------------------------------------------------------------|
| AND          | `and`      | Returns `True` if both conditions are `True`.                | `x > 5 and y < 10`                                          |
| OR           | `or`       | Returns `True` if at least one condition is `True`.          | `x > 5 or y < 10`                                           |
| NOT          | `not`      | Reverses the boolean value of the condition.                 | `not x > 5`                                                 |


### **Final Thoughts**

Logical operators are fundamental in Python for creating complex conditions and controlling the flow of your programs. By combining `and`, `or`, and `not`, you can evaluate complex logical expressions that are essential for decision-making in Python code.



### **Logical Operators in Python: Detailed Syntax and Usage**

Logical operators in Python allow for complex condition evaluation by combining boolean expressions. These operators are essential for making decisions in your code, and they are commonly used in `if` statements, loops, and list comprehensions.

### **1. Logical AND (`and`) Operator**

The `and` operator checks if **both conditions** are true. It returns `True` only if **both operands** are `True`; otherwise, it returns `False`. If the first condition is `False`, Python doesnâ€™t evaluate the second condition (short-circuiting).

#### **Syntax:**
```python
condition1 and condition2
```

#### **Explanation:**
- If `condition1` is `True` and `condition2` is `True`, the result is `True`.
- If either `condition1` or `condition2` is `False`, the result is `False`.
  
**Example:**
```python
x = 10
y = 5

# Checks if x is greater than 0 and y is less than 10
if x > 0 and y < 10:
    print("Both conditions are true.")  # Output: Both conditions are true.
else:
    print("At least one condition is false.")
```

#### **Key Points:**
- The `and` operator can be chained to check multiple conditions.
  ```python
  if x > 0 and y < 10 and z == 3:
      print("All conditions are true.")
  ```
- **Short-circuiting:** If `x > 0` is `False`, `y < 10` and `z == 3` are not evaluated.


### **2. Logical OR (`or`) Operator**

The `or` operator checks if **at least one of the conditions** is true. It returns `True` if **either one** or **both operands** are `True`; otherwise, it returns `False`.

#### **Syntax:**
```python
condition1 or condition2
```

#### **Explanation:**
- If either `condition1` or `condition2` is `True`, the result will be `True`.
- If both are `False`, the result will be `False`.

**Example:**
```python
x = 3
y = 10

# Checks if x is greater than 5 or y is less than 15
if x > 5 or y < 15:
    print("At least one condition is true.")  # Output: At least one condition is true.
else:
    print("Both conditions are false.")
```

#### **Key Points:**
- **Short-circuiting:** If `x > 5` is `True`, the second condition (`y < 15`) is not evaluated.
- The `or` operator can also be chained.
  ```python
  if x > 5 or y < 15 or z == 2:
      print("At least one condition is true.")
  ```


### **3. Logical NOT (`not`) Operator**

The `not` operator inverts the **boolean value** of the condition. It returns `True` if the condition is `False`, and `False` if the condition is `True`.

#### **Syntax:**
```python
not condition
```

#### **Explanation:**
- If the `condition` is `True`, `not condition` will return `False`.
- If the `condition` is `False`, `not condition` will return `True`.

**Example:**
```python
x = 5

# Checks if x is not less than 10
if not x < 10:
    print("x is not less than 10.")  # Output: x is not less than 10.
else:
    print("x is less than 10.")
```

#### **Key Points:**
- The `not` operator is commonly used to reverse the outcome of a boolean expression.
  ```python
  if not (x > 5 and y < 10):
      print("The condition is false.")
  ```


### **4. Combining Logical Operators**

You can combine multiple logical operators (`and`, `or`, `not`) in a single expression. Logical operators are evaluated based on **precedence**: `not` has higher precedence than `and`, and `and` has higher precedence than `or`.

#### **Syntax:**
```python
(condition1 and condition2) or (not condition3)
```

#### **Example:**
```python
x = 3
y = 10
z = 5

# Checks if x is greater than 2 and (y is less than 12 or z is not 5)
if x > 2 and (y < 12 or not z == 5):
    print("Condition is true.")  # Output: Condition is true.
else:
    print("Condition is false.")
```

#### **Explanation:**
- The expression inside the parentheses `y < 12 or not z == 5` is evaluated first.
- `not z == 5` turns `z == 5` into `False`, then the `or` expression returns `True` because `y < 12` is `True`.


### **5. Short-circuiting Behavior of Logical Operators**

Python **short-circuits** the evaluation of logical expressions:
- **For `and`:** If the first condition is `False`, the second condition is not evaluated because the result is already determined.
- **For `or`:** If the first condition is `True`, the second condition is not evaluated because the result is already `True`.

#### **Example with AND Short-circuiting:**
```python
x = 0
if x > 5 and (10 / x > 2):  # The second condition is not evaluated because the first one is False
    print("This will not run.")
```

#### **Example with OR Short-circuiting:**
```python
x = 5
if x > 0 or (10 / x > 2):  # The second condition is not evaluated because the first one is True
    print("This runs.")
```


### **6. Using Logical Operators in `if` Statements**

Logical operators are often used in `if` statements to test multiple conditions at once.

#### **Example 1:**
```python
age = 25
has_license = True

if age >= 18 and has_license:
    print("You are allowed to drive.")
else:
    print("You are not allowed to drive.")
```

- The condition `age >= 18 and has_license` checks if both conditions are true.

#### **Example 2:**
```python
x = 10
y = 3
if x > 5 or y > 5:
    print("At least one of the conditions is true.")  # Output: At least one of the conditions is true.
```

- The condition `x > 5 or y > 5` checks if at least one of the conditions is true.


### **7. Using Logical Operators in Loops**

You can also use logical operators within `while` or `for` loops to control the loop execution based on multiple conditions.

#### **Example with `while` loop:**
```python
x = 0
while x < 5 and x != 3:
    print(x)
    x += 1
```

- The loop runs until `x` is greater than or equal to `5` or `x` equals `3`.

#### **Example with `for` loop:**
```python
numbers = [1, 2, 3, 4, 5]
for num in numbers:
    if num % 2 == 0 or num == 3:
        print(num)
```

- The loop prints `2`, `3`, and `4` because they satisfy either the condition `num % 2 == 0` (even numbers) or `num == 3`.


### **8. Using Logical Operators with Functions**

Logical operators can be used with functions that return boolean values to control program flow.

#### **Example:**
```python
def is_positive(x):
    return x > 0

def is_even(x):
    return x % 2 == 0

x = 5
if is_positive(x) and is_even(x):
    print("x is positive and even.")
else:
    print("x is either negative or odd.")
```

Here:
- The function `is_positive(x)` returns `True` if `x > 0`.
- The function `is_even(x)` returns `True` if `x` is even.
- The `and` operator combines the results of both conditions.


### **9. Truth Tables for Logical Operators**

#### **AND (`and`) Truth Table:**

| `condition1` | `condition2` | `condition1 and condition2` |
|--------------|--------------|-----------------------------|
| `True`       | `True`       | `True`                      |
| `True`       | `False`      | `False`                     |
| `False`      | `True`       | `False`                     |
| `False`      | `False`      | `False`                     |

#### **OR (`or`) Truth Table:**

| `condition1` | `condition2` | `condition1 or condition2` |
|--------------|--------------|----------------------------|
| `True`       | `True`       | `True`                     |
| `True`       | `False`      | `True`                     |
| `False`      | `True`       | `True`                     |
| `False`      | `False`      | `False`                    |

#### **NOT

 (`not`) Truth Table:**

| `condition` | `not condition` |
|-------------|-----------------|
| `True`      | `False`         |
| `False`     | `True`          |


### **10. Summary of Logical Operators in Python**

| **Operator** | **Syntax**       | **Description**                                              | **Example**                       |
|--------------|------------------|--------------------------------------------------------------|-----------------------------------|
| AND          | `and`            | Returns `True` if both conditions are `True`.                 | `x > 5 and y < 10`                |
| OR           | `or`             | Returns `True` if at least one condition is `True`.           | `x > 5 or y < 10`                 |
| NOT          | `not`            | Reverses the boolean value of a condition.                    | `not x > 5`                       |

By mastering the syntax and understanding the behavior of logical operators, you can create complex decision-making logic in your Python programs.