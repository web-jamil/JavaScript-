In Python, there are primarily two types of loops:

1. **`for` loop**
2. **`while` loop**

Additionally, there are control flow statements that can be used to modify the behavior of loops:

- **`break`**
- **`continue`**
- **`else`**

### **1. `for` Loop**

The `for` loop is used to iterate over a sequence (like a list, tuple, string, dictionary, or range). The syntax is straightforward and commonly used when the number of iterations is known.

#### **Syntax:**
```python
for variable in sequence:
    # Code block to execute
```

#### **Types of Iterables for `for` Loop:**

- **List**
- **Tuple**
- **String**
- **Dictionary**
- **Range**
- **Set**

#### **Examples:**

**a. Iterating through a list:**
```python
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)
```

**b. Iterating through a string:**
```python
word = "hello"
for char in word:
    print(char)
```

**c. Iterating through a dictionary:**
```python
person = {"name": "Alice", "age": 30, "city": "New York"}
for key, value in person.items():
    print(key, value)
```

**d. Using `range()` function in a for loop:**
```python
for i in range(5):  # Iterates from 0 to 4
    print(i)
```

**e. Using `range()` with start, stop, and step:**
```python
for i in range(1, 10, 2):  # Iterates from 1 to 9, step by 2
    print(i)
```

### **2. `while` Loop**

The `while` loop runs as long as the condition is `True`. If the condition is `False` initially, the loop will not execute. It is commonly used when the number of iterations is not known ahead of time.

#### **Syntax:**
```python
while condition:
    # Code block to execute
```

#### **Examples:**

**a. Basic while loop:**
```python
x = 0
while x < 5:
    print(x)
    x += 1
```

**b. Infinite loop (until manually stopped):**
```python
while True:
    print("This will run forever")
```

**c. While loop with condition:**
```python
y = 10
while y > 0:
    print(y)
    y -= 1
```

### **3. Loop Control Statements**

These control statements help alter the flow of loops:

#### **a. `break` Statement**
The `break` statement is used to exit the loop prematurely, regardless of the loop condition.

**Example:**
```python
for i in range(5):
    if i == 3:
        break  # Breaks the loop when i equals 3
    print(i)
```

#### **b. `continue` Statement**
The `continue` statement skips the current iteration and proceeds to the next iteration of the loop.

**Example:**
```python
for i in range(5):
    if i == 3:
        continue  # Skips printing 3
    print(i)
```

#### **c. `else` with Loops**
The `else` block is executed after the loop finishes (if the loop was not terminated by a `break`).

**Example with `for`:**
```python
for i in range(5):
    print(i)
else:
    print("Loop finished without break.")
```

**Example with `while`:**
```python
x = 5
while x > 0:
    print(x)
    x -= 1
else:
    print("Loop finished without break.")
```

### **4. Nested Loops**

Nested loops occur when one loop is placed inside another. The inner loop runs completely for each iteration of the outer loop.

#### **Syntax:**
```python
for i in range(n):
    for j in range(m):
        # Code block
```

#### **Example:**
```python
for i in range(3):  # Outer loop
    for j in range(2):  # Inner loop
        print(f"i = {i}, j = {j}")
```

### **5. List Comprehensions (Special Case of `for` Loops)**

List comprehensions provide a compact way to process all or part of the elements in a collection and return a list.

#### **Syntax:**
```python
[expression for item in iterable]
```

#### **Example:**
```python
squares = [x**2 for x in range(5)]
print(squares)  # Output: [0, 1, 4, 9, 16]
```

### **6. Summary of All Loop Types in Python**

| **Loop Type**     | **Syntax**                                     | **Example**                                              |
|-------------------|------------------------------------------------|----------------------------------------------------------|
| `for` loop        | `for variable in sequence:`                    | `for i in range(5): print(i)`                            |
| `while` loop      | `while condition:`                             | `while x < 5: print(x); x += 1`                          |
| `break`           | `break`                                        | `for i in range(5): if i == 3: break`                    |
| `continue`        | `continue`                                     | `for i in range(5): if i == 3: continue`                 |
| `else` (with loop)| `else:`                                        | `for i in range(5): print(i); else: print('Done!')`       |
| Nested loops      | `for i in range(n): for j in range(m):`       | `for i in range(3): for j in range(2): print(i, j)`      |
| List Comprehension| `[expression for item in iterable]`           | `[x**2 for x in range(5)]`                               |


### **Key Points:**
- **`for` loop** is used for iterating over a sequence (list, range, etc.).
- **`while` loop** is used for repeating an action while a condition is `True`.
- **`break`** exits the loop immediately.
- **`continue`** skips the current iteration and moves to the next one.
- **`else`** executes when the loop completes normally (not via `break`).
- **Nested loops** allow for looping within another loop.
- **List comprehensions** offer a concise way to create lists from loops.

This summary includes all types of loops in Python along with control flow statements to manage loop behavior.