### **Python f-strings (Formatted String Literals)**

f-strings are a modern way to format strings in Python, introduced in Python 3.6. They provide a concise and readable way to embed expressions inside string literals using curly braces `{}`.

---

### **Syntax of f-strings**

```python
f"string {expression}"
```

1. The string is prefixed with an `f` or `F`.
2. Expressions inside `{}` are evaluated at runtime and replaced with their values in the resulting string.
3. Any valid Python expression can be used inside `{}`.

---

### **Examples**

#### 1. **Basic Usage**
```python
name = "Alice"
age = 25
print(f"My name is {name} and I am {age} years old.")
# Output: My name is Alice and I am 25 years old.
```

#### 2. **Expressions Inside f-strings**
```python
a = 5
b = 10
print(f"The sum of {a} and {b} is {a + b}.")
# Output: The sum of 5 and 10 is 15.
```

#### 3. **Calling Functions**
```python
def greet(name):
    return f"Hello, {name}!"

print(f"Greeting: {greet('Bob')}")
# Output: Greeting: Hello, Bob!
```

#### 4. **Accessing Attributes and Indexes**
```python
person = {"name": "John", "age": 30}
print(f"Name: {person['name']}, Age: {person['age']}")
# Output: Name: John, Age: 30

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

p = Person("Jane", 28)
print(f"Name: {p.name}, Age: {p.age}")
# Output: Name: Jane, Age: 28
```

---

### **Formatting Options**

f-strings support all the formatting options provided by Pythonâ€™s `format()` method.

#### 1. **Padding and Alignment**
- **Left align (`<`)**, **right align (`>`)**, and **center (`^`)**.
```python
value = "Python"
print(f"{value:<10}")  # Left-align
print(f"{value:>10}")  # Right-align
print(f"{value:^10}")  # Center-align
```

#### 2. **Number Formatting**
- Display numbers with specific precision or width.
```python
pi = 3.14159
print(f"Pi to 2 decimal places: {pi:.2f}")
# Output: Pi to 2 decimal places: 3.14

large_number = 1234567
print(f"Formatted number: {large_number:,}")
# Output: Formatted number: 1,234,567
```

#### 3. **String Case Conversion**
- Change string case within f-strings.
```python
name = "python"
print(f"Uppercase: {name.upper()}")
print(f"Capitalized: {name.capitalize()}")
```

#### 4. **Using Raw Strings**
- Use `repr()` style formatting for raw string representation.
```python
data = "Hello\nWorld"
print(f"Raw representation: {data!r}")
# Output: Raw representation: 'Hello\nWorld'
```

#### 5. **Hexadecimal, Binary, and Octal**
```python
number = 255
print(f"Hexadecimal: {number:x}")
print(f"Binary: {number:b}")
print(f"Octal: {number:o}")
```

#### 6. **Percentage**
```python
value = 0.1234
print(f"Percentage: {value:.2%}")
# Output: Percentage: 12.34%
```

---

### **Multiline f-strings**

Use triple quotes for multiline f-strings.

```python
name = "Alice"
age = 25
bio = f"""
Name: {name}
Age: {age}
Occupation: Developer
"""
print(bio)
```

---

### **f-strings with Escaped Characters**
To include literal curly braces `{` or `}` in an f-string, double them:

```python
print(f"Use {{ and }} for braces.")
# Output: Use { and } for braces.
```

---

### **Key Features and Advantages**
1. **Readability**:
   - f-strings are more concise and readable compared to `str.format()` or `%` formatting.

2. **Performance**:
   - f-strings are faster because they are evaluated at runtime.

3. **Dynamic Expressions**:
   - You can embed any Python expression, including function calls and calculations.

---

### **Limitations**
1. **Python 3.6 or Newer**:
   - f-strings are not available in Python versions below 3.6.

2. **No Escaping Backslashes**:
   - You cannot use raw string literals (`r"string"`) and f-strings together directly. Workaround:
   ```python
   path = r"C:\Users\Name"
   print(f"{path}\\folder")
   ```

---

### **Comparison with Other Formatting Methods**

#### Using `%` Formatting
```python
name = "Alice"
age = 25
print("My name is %s and I am %d years old." % (name, age))
```

#### Using `str.format()`
```python
name = "Alice"
age = 25
print("My name is {} and I am {} years old.".format(name, age))
```

#### Using f-strings
```python
name = "Alice"
age = 25
print(f"My name is {name} and I am {age} years old.")
```

**f-strings are preferred for their clarity and brevity.**

--- 

### **Comprehensive Examples**

#### Example 1: Formatting Numerical Data
```python
x = 12345.6789
print(f"Number: {x:,.2f}")  # Output: Number: 12,345.68
```

#### Example 2: Combining Functions and Formatting
```python
name = "python"
print(f"{name.upper()} is awesome!")
# Output: PYTHON is awesome!
```

#### Example 3: Debugging
Use `=` to include variable names and values in the output.
```python
value = 42
print(f"{value=}")
# Output: value=42
```

### **Comprehensive Notes on f-strings in Python**

f-strings, or **formatted string literals**, are a powerful and concise way to include variables and expressions directly in strings. Introduced in Python 3.6, they allow for embedding expressions within `{}` inside a string prefixed with `f` or `F`.

---

### **Basic Syntax**

```python
f"string {expression}"
```

1. The string begins with `f` or `F` before the opening quotation mark.
2. Curly braces `{}` are used to insert variables or expressions.
3. Everything inside `{}` is evaluated at runtime.

---

### **Features of f-strings**

1. **Embedding Variables**
   ```python
   name = "Alice"
   age = 30
   print(f"My name is {name} and I am {age} years old.")
   # Output: My name is Alice and I am 30 years old.
   ```

2. **Evaluating Expressions**
   ```python
   a, b = 10, 20
   print(f"Sum of {a} and {b} is {a + b}.")
   # Output: Sum of 10 and 20 is 30.
   ```

3. **Function Calls**
   ```python
   def greet(name):
       return f"Hello, {name}!"
   print(f"{greet('Bob')}")
   # Output: Hello, Bob!
   ```

4. **Accessing Attributes and Indexes**
   ```python
   person = {"name": "John", "age": 35}
   print(f"Name: {person['name']}, Age: {person['age']}")
   # Output: Name: John, Age: 35

   class Person:
       def __init__(self, name, age):
           self.name = name
           self.age = age

   p = Person("Jane", 28)
   print(f"Name: {p.name}, Age: {p.age}")
   # Output: Name: Jane, Age: 28
   ```

---

### **Advanced Syntax**

#### 1. **Formatting Numbers**

- **Float Precision**
  ```python
  pi = 3.14159
  print(f"Pi to 2 decimal places: {pi:.2f}")
  # Output: Pi to 2 decimal places: 3.14
  ```

- **Thousands Separator**
  ```python
  num = 123456789
  print(f"Number with commas: {num:,}")
  # Output: Number with commas: 123,456,789
  ```

- **Percentage**
  ```python
  value = 0.1234
  print(f"Percentage: {value:.2%}")
  # Output: Percentage: 12.34%
  ```

- **Binary, Octal, Hexadecimal**
  ```python
  num = 255
  print(f"Binary: {num:b}, Octal: {num:o}, Hex: {num:x}")
  # Output: Binary: 11111111, Octal: 377, Hex: ff
  ```

#### 2. **Aligning Text**

- **Left (`<`), Right (`>`), Center (`^`) Alignment**
  ```python
  text = "Python"
  print(f"{text:<10}")  # Left-align
  print(f"{text:>10}")  # Right-align
  print(f"{text:^10}")  # Center-align
  ```

#### 3. **String Case Conversion**
```python
name = "python"
print(f"Uppercase: {name.upper()}")
print(f"Lowercase: {name.lower()}")
print(f"Titlecase: {name.title()}")
```

#### 4. **Escaping Curly Braces**
To include literal `{` or `}` in an f-string, use double curly braces:
```python
print(f"Use {{ and }} for curly braces.")
# Output: Use { and } for curly braces.
```

#### 5. **Debugging with `=`**
The `=` specifier shows both the expression and its value:
```python
value = 42
print(f"{value=}")
# Output: value=42
```

---

### **f-strings with Multiline Strings**

Use triple quotes for multiline f-strings:
```python
name = "Alice"
age = 25
bio = f"""
Name: {name}
Age: {age}
Occupation: Developer
"""
print(bio)
```

---

### **f-strings vs Other String Formatting Methods**

#### Using `%` Formatting
```python
name = "Alice"
age = 25
print("My name is %s and I am %d years old." % (name, age))
```

#### Using `str.format()`
```python
name = "Alice"
age = 25
print("My name is {} and I am {} years old.".format(name, age))
```

#### Using f-strings
```python
name = "Alice"
age = 25
print(f"My name is {name} and I am {age} years old.")
```

---

### **Performance**

f-strings are faster than both `%` formatting and `str.format()` because they are evaluated at runtime and avoid additional function calls.

---

### **Limitations**

1. **Python Version**: Available only in Python 3.6+.
2. **No Raw f-strings**: Cannot use `r` and `f` together directly.
   - Workaround:
     ```python
     path = r"C:\Users"
     print(f"{path}\\Documents")
     ```

---

### **Comprehensive Examples**

#### 1. **Combining Variables, Calculations, and Formatting**
```python
name = "Alice"
balance = 12345.6789
print(f"{name}, your account balance is {balance:,.2f} USD.")
# Output: Alice, your account balance is 12,345.68 USD.
```

#### 2. **Debugging Example**
```python
a = 5
b = 10
print(f"Debugging: {a=}, {b=}, Sum={a+b}")
# Output: Debugging: a=5, b=10, Sum=15
```

#### 3. **Date and Time Formatting**
```python
from datetime import datetime
now = datetime.now()
print(f"Current date and time: {now:%Y-%m-%d %H:%M:%S}")
# Output: Current date and time: 2023-12-03 15:45:00
```

#### 4. **Alignment and Padding**
```python
for i in range(1, 6):
    print(f"{i:<5}{i**2:<5}{i**3:<5}")
# Output:
# 1    1    1    
# 2    4    8    
# 3    9    27   
# 4    16   64   
# 5    25   125  
```

---

### **Key Takeaways**

- f-strings offer a concise and readable way to format strings.
- They support all kinds of formatting, including numbers, alignment, and case transformations.
- With debugging support (`=`), they are excellent for quick diagnostics.
- They are faster and more efficient than older formatting methods.



### **Comprehensive Guide to Python f-strings (Formatted String Literals)**

---

### **Overview**

f-strings are a feature introduced in Python 3.6, providing a simple and efficient way to embed expressions inside string literals. These strings are prefixed with `f` or `F` and use curly braces `{}` to insert variables, expressions, or even function calls.

---

### **Basic Syntax**

```python
f"string {expression}"
```

1. **Prefix**: Strings must begin with `f` or `F`.
2. **Placeholders**: Curly braces `{}` are used to insert Python expressions into the string.
3. **Runtime Evaluation**: The expressions are evaluated at runtime and included in the output.

---

### **Key Features**

#### 1. **Embedding Variables**
```python
name = "Alice"
age = 30
print(f"My name is {name} and I am {age} years old.")
# Output: My name is Alice and I am 30 years old.
```

#### 2. **Embedding Expressions**
```python
x, y = 10, 20
print(f"The sum of {x} and {y} is {x + y}.")
# Output: The sum of 10 and 20 is 30.
```

#### 3. **Function Calls**
```python
def greet(name):
    return f"Hello, {name}!"

print(f"{greet('Bob')}")
# Output: Hello, Bob!
```

#### 4. **Accessing Attributes and Indices**
```python
person = {"name": "John", "age": 35}
print(f"Name: {person['name']}, Age: {person['age']}")
# Output: Name: John, Age: 35

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

p = Person("Jane", 28)
print(f"Name: {p.name}, Age: {p.age}")
# Output: Name: Jane, Age: 28
```

#### 5. **Debugging**
Use `=` inside f-strings to show both the expression and its value.
```python
value = 42
print(f"{value=}")
# Output: value=42
```

---

### **Advanced Features**

#### 1. **Formatting Numbers**
- **Float Precision**
  ```python
  pi = 3.14159
  print(f"Pi to 2 decimal places: {pi:.2f}")
  # Output: Pi to 2 decimal places: 3.14
  ```

- **Thousands Separator**
  ```python
  num = 123456789
  print(f"Number with commas: {num:,}")
  # Output: Number with commas: 123,456,789
  ```

- **Percentage**
  ```python
  value = 0.1234
  print(f"Percentage: {value:.2%}")
  # Output: Percentage: 12.34%
  ```

- **Binary, Octal, Hexadecimal**
  ```python
  num = 255
  print(f"Binary: {num:b}, Octal: {num:o}, Hexadecimal: {num:x}")
  # Output: Binary: 11111111, Octal: 377, Hexadecimal: ff
  ```

---

#### 2. **Text Alignment**
Use alignment specifiers (`<`, `>`, `^`) to control how strings or numbers are displayed within a fixed width.

- **Left Alignment**
  ```python
  print(f"{'Left':<10}Aligned")
  # Output: Left      Aligned
  ```

- **Right Alignment**
  ```python
  print(f"{'Right':>10}Aligned")
  # Output:      RightAligned
  ```

- **Center Alignment**
  ```python
  print(f"{'Center':^10}Aligned")
  # Output:   Center  Aligned
  ```

---

#### 3. **Nested f-strings**
You can use an f-string inside another expression in the same f-string.

```python
nested = "world"
print(f"Hello, {f'{nested}!'}")
# Output: Hello, world!
```

---

#### 4. **Datetime Formatting**
f-strings allow for formatting date and time using `datetime` module.

```python
from datetime import datetime
now = datetime.now()
print(f"Current date and time: {now:%Y-%m-%d %H:%M:%S}")
# Output: Current date and time: 2023-12-03 18:30:00
```

---

#### 5. **Using Raw Strings with f-strings**
While `f` and `r` prefixes cannot be combined directly, you can use concatenation for similar results:

```python
path = r"C:\Users"
print(f"{path}\\Documents")
# Output: C:\Users\Documents
```

---

### **Performance**
f-strings are faster than older string formatting methods (`%` and `str.format()`) because they are evaluated at runtime without additional function calls.

#### **Performance Comparison**
```python
import timeit

setup = "name = 'Alice'; age = 30"
f_string = "f'{name} is {age} years old.'"
format_string = "'{} is {} years old.'.format(name, age)"
percent_format = "'%s is %d years old.' % (name, age)"

print("f-string:", timeit.timeit(f_string, setup=setup, number=1000000))
print(".format:", timeit.timeit(format_string, setup=setup, number=1000000))
print("percent:", timeit.timeit(percent_format, setup=setup, number=1000000))
```

---

### **Escaping Special Characters**
To include literal curly braces `{}` in an f-string, use double curly braces `{{` and `}}`.

```python
print(f"{{This is a literal curly brace}}")
# Output: {This is a literal curly brace}
```

---

### **f-strings vs Other Formatting Methods**

| Feature              | f-strings              | `str.format()`             | `%` formatting             |
|-----------------------|------------------------|----------------------------|----------------------------|
| **Readability**       | High                  | Medium                     | Low                        |
| **Performance**       | Fastest               | Slower                     | Slow                       |
| **Debugging (`=`)**   | Supported             | Not supported              | Not supported              |
| **Ease of Use**       | High                  | Medium                     | Low                        |
| **Nested Formatting** | Supported             | Supported                  | Limited                    |

---

### **Common Use Cases**

#### 1. **User-Friendly Output**
```python
name = "Alice"
balance = 1234.56
print(f"Hi {name}, your balance is ${balance:,.2f}.")
# Output: Hi Alice, your balance is $1,234.56.
```

#### 2. **Table Formatting**
```python
data = [("Alice", 25), ("Bob", 30), ("Charlie", 35)]
print(f"{'Name':<10}{'Age':<5}")
for name, age in data:
    print(f"{name:<10}{age:<5}")
# Output:
# Name      Age  
# Alice     25   
# Bob       30   
# Charlie   35   
```

#### 3. **Dynamic SQL Queries**
```python
table_name = "users"
query = f"SELECT * FROM {table_name} WHERE active = 1;"
print(query)
# Output: SELECT * FROM users WHERE active = 1;
```

#### 4. **Path Construction**
```python
directory = "C:\\Users"
filename = "document.txt"
path = f"{directory}\\{filename}"
print(path)
# Output: C:\Users\document.txt
```

### **Limitations**

1. **Python Version**: f-strings are available only in Python 3.6 and later.
2. **Raw f-strings**: Cannot directly combine `r` and `f`.
3. **Compile-Time Only**: Expressions inside `{}` are evaluated when the string is created.


### **Summary**
- **f-strings** are a concise and readable way to format strings in Python.
- They allow for direct embedding of variables, expressions, and function calls.
- With advanced features like alignment, precision, and debugging support, they are a versatile tool for string manipulation.
- They are faster and more user-friendly than `%` formatting and `str.format()`.

### **Formatting Numbers in Python: A Comprehensive Guide**

Formatting numbers in Python allows you to control their appearance, including precision, alignment, padding, and representation (e.g., decimal, binary, hexadecimal). This guide covers multiple methods and their applications.


### **Methods to Format Numbers**

#### 1. **Using f-strings (Preferred in Python 3.6+)**
f-strings provide an easy, readable way to format numbers using `{}` with specific format specifiers.

#### 2. **Using `str.format()`**
The `.format()` method offers a versatile approach to number formatting.

#### 3. **Using `%` Formatting (Old Style)**
This legacy method is still supported but less preferred due to readability concerns.

#### 4. **Using Built-In Functions**
Python functions like `format()`, `round()`, and others can also help in formatting numbers.


### **Common Formatting Features**

#### **1. Basic Decimal Precision**
- **f-strings**
```python
pi = 3.14159
print(f"{pi:.2f}")  # 2 decimal places
# Output: 3.14
```

- **str.format()**
```python
print("{:.2f}".format(pi))
# Output: 3.14
```

- **% Formatting**
```python
print("%.2f" % pi)
# Output: 3.14
```

#### **2. Alignment and Padding**
Control alignment with `<`, `>`, `^` for left, right, and center alignment respectively.

- **Left Align**
```python
print(f"{123:<6}")
# Output: '123   '
```

- **Right Align**
```python
print(f"{123:>6}")
# Output: '   123'
```

- **Center Align**
```python
print(f"{123:^6}")
# Output: ' 123  '
```

- **Padding with Zeros**
```python
num = 42
print(f"{num:05}")  # Pad with zeros to make the width 5
# Output: 00042
```

#### **3. Thousands Separator**
Add commas for thousands separation.

- **f-strings**
```python
num = 123456789
print(f"{num:,}")
# Output: 123,456,789
```

- **str.format()**
```python
print("{:,}".format(num))
# Output: 123,456,789
```

#### **4. Scientific Notation**
Represent numbers in scientific (exponential) notation.

- **f-strings**
```python
num = 123456789
print(f"{num:.2e}")  # 2 decimal places in scientific notation
# Output: 1.23e+08
```

- **str.format()**
```python
print("{:.2e}".format(num))
# Output: 1.23e+08
```

- **% Formatting**
```python
print("%.2e" % num)
# Output: 1.23e+08
```

#### **5. Binary, Octal, and Hexadecimal**
Convert numbers to other bases.

- **f-strings**
```python
num = 255
print(f"Binary: {num:b}, Octal: {num:o}, Hex: {num:x}")
# Output: Binary: 11111111, Octal: 377, Hex: ff
```

- **str.format()**
```python
print("Binary: {0:b}, Octal: {0:o}, Hex: {0:x}".format(num))
# Output: Binary: 11111111, Octal: 377, Hex: ff
```

- **% Formatting**
```python
print("Binary: %s" % bin(num)[2:])  # Strip '0b' prefix
print("Octal: %o, Hex: %x" % (num, num))
# Output: Binary: 11111111, Octal: 377, Hex: ff
```

#### **6. Percentage Representation**
Display numbers as percentages.

- **f-strings**
```python
value = 0.1234
print(f"{value:.2%}")
# Output: 12.34%
```

- **str.format()**
```python
print("{:.2%}".format(value))
# Output: 12.34%
```

- **% Formatting**
```python
print("%.2f%%" % (value * 100))
# Output: 12.34%
```

#### **7. Custom Width and Precision**
Control both width and precision.

- **f-strings**
```python
num = 3.14159
print(f"{num:10.2f}")  # Width of 10, 2 decimal places
# Output: '      3.14'
```

- **str.format()**
```python
print("{:10.2f}".format(num))
# Output: '      3.14'
```

- **% Formatting**
```python
print("%10.2f" % num)
# Output: '      3.14'
```

#### **8. Dynamic Padding**
You can dynamically set width or precision using variables.

```python
width = 10
precision = 4
value = 3.14159
print(f"{value:{width}.{precision}f}")
# Output: '    3.1416'
```

### **Using Built-In Functions**

#### 1. **`round()`**
Round a number to a specified number of decimal places.

```python
value = 3.14159
print(round(value, 2))  # Round to 2 decimal places
# Output: 3.14
```

#### 2. **`format()` Function**
Format numbers using a format string.

```python
value = 12345.6789
print(format(value, "0,.2f"))  # Add commas and 2 decimal places
# Output: 12,345.68
```


### **Comparison of Methods**

| Feature                   | f-strings                | `str.format()`            | `%` Formatting             |
|---------------------------|--------------------------|---------------------------|----------------------------|
| **Readability**           | High                    | Medium                    | Low                        |
| **Performance**           | Fastest                 | Slower                    | Slow                       |
| **Complexity Handling**   | Easy for nested cases   | Medium                    | Difficult                  |
| **Use Case Suitability**  | Modern code             | Backward compatibility    | Legacy systems             |


### **Common Use Cases**

#### 1. **Dynamic SQL Query**
```python
table = "users"
rows = 100
query = f"SELECT * FROM {table} LIMIT {rows};"
print(query)
# Output: SELECT * FROM users LIMIT 100;
```

#### 2. **Report Generation**
```python
sales = 12345.678
print(f"Total Sales: ${sales:,.2f}")
# Output: Total Sales: $12,345.68
```

#### 3. **Logging Messages**
```python
level = "ERROR"
message = "File not found"
print(f"[{level:^7}] {message}")
# Output: [ ERROR ] File not found
```

#### 4. **Binary Data Display**
```python
value = 42
print(f"Value in binary: {value:b}")
# Output: Value in binary: 101010
```

### **Key Notes**
1. f-strings are generally preferred for readability and speed.
2. Use `str.format()` or `%` formatting for older versions of Python.
3. For large-scale formatting, consider using libraries like **`NumPy`** or **`pandas`** for efficient handling of numerical data.

Here's a **more detailed and comprehensive guide** to **formatting numbers in Python**, with additional examples, advanced use cases, and explanations of nuances.

### **What is Number Formatting?**

Number formatting is the process of displaying numbers in a user-friendly way while maintaining precision, alignment, and context. Python provides multiple tools to achieve this.

### **1. Basic Decimal Precision**

#### Goal: Restrict numbers to a fixed number of decimal places.

1. **Using f-strings**:
   ```python
   pi = 3.14159
   print(f"{pi:.2f}")  # 2 decimal places
   # Output: 3.14
   ```
   - `.2f`: Formats the number as a fixed-point number with 2 decimal places.

2. **Using `str.format()`**:
   ```python
   print("{:.2f}".format(pi))
   # Output: 3.14
   ```

3. **Using `%` Formatting**:
   ```python
   print("%.2f" % pi)
   # Output: 3.14
   ```

#### Notes:
- Use `.nf` to display a number with `n` decimal places.
- For rounding, Python automatically rounds numbers based on the next digit (e.g., 3.145 rounds to 3.15 for `.2f`).

### **2. Aligning and Padding**

#### Goal: Adjust alignment (left, right, or center) or add padding with spaces or other characters.

1. **Using f-strings**:
   ```python
   num = 42
   print(f"{num:<5}")  # Left-align (width 5)
   # Output: '42   '
   print(f"{num:>5}")  # Right-align (width 5)
   # Output: '   42'
   print(f"{num:^5}")  # Center-align (width 5)
   # Output: ' 42  '
   ```

2. **Padding with characters**:
   ```python
   num = 42
   print(f"{num:0>5}")  # Pad with zeros, right-align
   # Output: 00042
   print(f"{num:*^7}")  # Pad with '*', center-align
   # Output: '**42***'
   ```

3. **Using `str.format()`**:
   ```python
   print("{:<5}".format(num))  # Left-align
   # Output: '42   '
   ```


### **3. Adding Thousands Separator**

#### Goal: Add commas (or other separators) for large numbers.

1. **Using f-strings**:
   ```python
   num = 123456789
   print(f"{num:,}")
   # Output: 123,456,789
   ```

2. **Using `str.format()`**:
   ```python
   print("{:,}".format(num))
   # Output: 123,456,789
   ```

3. **Custom separator**:
   ```python
   print(f"{num:_}")  # Use '_' as separator
   # Output: 123_456_789
   ```



### **4. Scientific Notation**

#### Goal: Represent numbers in exponential form.

1. **Using f-strings**:
   ```python
   num = 123456789
   print(f"{num:.2e}")  # 2 decimal places in scientific notation
   # Output: 1.23e+08
   ```

2. **Using `str.format()`**:
   ```python
   print("{:.2e}".format(num))
   # Output: 1.23e+08
   ```

3. **Using `%` Formatting**:
   ```python
   print("%.2e" % num)
   # Output: 1.23e+08
   ```



### **5. Representing Binary, Octal, and Hexadecimal**

1. **Using f-strings**:
   ```python
   num = 255
   print(f"Binary: {num:b}, Octal: {num:o}, Hexadecimal: {num:x}")
   # Output: Binary: 11111111, Octal: 377, Hexadecimal: ff
   ```

2. **Using `str.format()`**:
   ```python
   print("Binary: {0:b}, Octal: {0:o}, Hexadecimal: {0:x}".format(num))
   # Output: Binary: 11111111, Octal: 377, Hexadecimal: ff
   ```

3. **Using built-in conversion functions**:
   ```python
   print(bin(num))  # Binary
   print(oct(num))  # Octal
   print(hex(num))  # Hexadecimal
   ```



### **6. Percentage Representation**

#### Goal: Display numbers as percentages.

1. **Using f-strings**:
   ```python
   value = 0.12345
   print(f"{value:.2%}")  # 2 decimal places as percentage
   # Output: 12.35%
   ```

2. **Using `str.format()`**:
   ```python
   print("{:.2%}".format(value))
   # Output: 12.35%
   ```


### **7. Dynamic Width and Precision**

#### Goal: Control formatting dynamically using variables.

1. **Dynamic width or precision with f-strings**:
   ```python
   width = 10
   precision = 4
   value = 3.14159
   print(f"{value:{width}.{precision}f}")
   # Output: '    3.1416'
   ```

2. **Dynamic width or precision with `str.format()`**:
   ```python
   print("{value:{width}.{precision}f}".format(value=value, width=width, precision=precision))
   # Output: '    3.1416'
   ```


### **8. Custom Locale-Based Formatting**

#### Goal: Apply localized number formatting.

1. **Using `locale` library**:
   ```python
   import locale
   locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
   num = 1234567.89
   print(locale.format_string("%d", num, grouping=True))
   # Output: 1,234,567
   ```


### **9. Comparing Methods**

| Feature                      | f-strings                | `str.format()`           | `%` Formatting            |
|------------------------------|--------------------------|--------------------------|---------------------------|
| **Readability**              | High                    | Medium                   | Low                       |
| **Performance**              | Fastest                 | Fast                     | Slower                    |
| **Dynamic Format Support**   | Yes                     | Yes                      | Limited                   |
| **Complex Nested Cases**     | Easy                    | Medium                   | Hard                      |


### **Advanced Use Cases**

#### 1. **Formatting Currency**
```python
amount = 1234.567
print(f"${amount:,.2f}")
# Output: $1,234.57
```

#### 2. **Logging with Dynamic Alignment**
```python
level = "INFO"
message = "Process completed successfully."
print(f"[{level:^8}] {message}")
# Output: [  INFO  ] Process completed successfully.
```

#### 3. **Alignment in Tables**
```python
data = [
    ("Alice", 25, 3.75),
    ("Bob", 22, 3.89),
    ("Charlie", 23, 3.67)
]
for name, age, gpa in data:
    print(f"{name:<10} {age:>5} {gpa:>6.2f}")
# Output:
# Alice           25   3.75
# Bob             22   3.89
# Charlie         23   3.67
```

#### 4. **Binary Representation in Debugging**
```python
value = 42
print(f"{value:08b}")  # 8-bit binary with leading zeros
# Output: 00101010
```

This guide provides a **deep dive into formatting numbers** with detailed examples, use cases, and comparisons. Let me know if you'd like further clarification on specific topics!